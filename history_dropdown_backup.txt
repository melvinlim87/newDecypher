import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { auth, database } from '../lib/firebase';
import { ref, onValue, query, limitToLast, orderByChild } from 'firebase/database';
import { ChevronDown, ChevronRight, Circle } from 'lucide-react';
import { LoadHistoryModal } from './LoadHistoryModal';
import { useAnalysisContext } from '../context/AnalysisContext';

interface HistoryItem {
  id: string;
  type: 'market-analysis' | 'ea-generator' | 'chat-conversation';
  title: string;
  content: string;
  timestamp: string;
  timeframe?: string;
  chartUrls?: string[];
  messages?: string[];
}

interface HistoryListProps {
  isCollapsed: boolean;
  isExpanded: boolean;
  onToggle: () => void;
  historyType: 'market-analysis' | 'ea-generator' | 'chat-conversation';
  label: string;
  compact?: boolean;
}

export function HistoryList({ isCollapsed, isExpanded, onToggle, historyType, label, compact = false }: HistoryListProps) {
  const [recentHistory, setRecentHistory] = useState<HistoryItem[]>([]);
  const [selectedItem, setSelectedItem] = useState<HistoryItem | null>(null);
  const [showModal, setShowModal] = useState(false);
  const navigate = useNavigate();
  const { setAnalysis, setTimeframe, setChartPreviews, setInitialMessage } = useAnalysisContext();

  useEffect(() => {
    if (!auth.currentUser || !isExpanded) return;

    const userHistoryRef = query(
      ref(database, `users/${auth.currentUser.uid}/history`),
      orderByChild('timestamp'),
      limitToLast(10)
    );

    const unsubscribe = onValue(userHistoryRef, (snapshot) => {
      if (snapshot.exists()) {
        const data = snapshot.val();
        const historyItems = Object.entries(data)
          .map(([id, item]: [string, any]) => ({
            id,
            ...item,
          }))
          .filter(item => item.type === historyType)
          .sort((a, b) => 
            new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
          );
        setRecentHistory(historyItems.slice(0, 5)); // Only show 5 most recent items
      } else {
        setRecentHistory([]);
      }
    });

    return () => unsubscribe();
  }, [isExpanded, historyType]);

  const handleItemClick = (item: HistoryItem) => {
    setSelectedItem(item);
    setShowModal(true);
  };

  const handleConfirm = () => {
    if (selectedItem) {
      if (selectedItem.type === 'market-analysis') {
        // Load the history content into the analysis context
        setAnalysis(selectedItem.content);
        setTimeframe(selectedItem.timeframe || null);
        setChartPreviews(selectedItem.chartUrls || []);
        setInitialMessage("Analysis history successfully loaded! ðŸ”„");
        
        // Navigate to the chat page with the history ID
        navigate('/', { 
          state: { 
            analysisId: selectedItem.id 
          } 
        });
      } else if (selectedItem.type === 'chat-conversation') {
        // For chat conversations, navigate to the chat page
        setInitialMessage("Chat conversation loaded! ðŸ’¬");
        
        navigate('/', { 
          state: { 
            analysisId: selectedItem.id 
          } 
        });
      } else if (selectedItem.type === 'ea-generator') {
        // Navigate to the EA Generator page with history data
        navigate('/ea-generator', { 
          state: { 
            historyId: selectedItem.id,
            content: selectedItem.content,
            messages: selectedItem.messages
          } 
        });
      }
      
      setShowModal(false);
      setSelectedItem(null);
    }
  };

  const handleCancel = () => {
    setShowModal(false);
    setSelectedItem(null);
  };

  // If in compact mode, don't show the header button
  if (compact) {
    return (
      <>
        <div className="py-1">
          {recentHistory.length > 0 ? (
            <>
              <div className="text-xs text-indigo-300 px-4 py-1">{label}</div>
              <div className="space-y-1 mt-1">
                {recentHistory.map((item) => (
                  <button
                    key={item.id}
                    onClick={() => handleItemClick(item)}
                    className="w-full flex items-center px-4 py-2 text-xs hover:bg-gray-700/50 rounded transition-colors group"
                  >
                    <div className="text-left w-full min-w-0">
                      <div className="text-gray-200 truncate max-w-full">
                        {item.title || (item.content ? item.content.substring(0, 30) : 'No content available')}
                      </div>
                      <div className="text-xs text-gray-400 truncate">
                        {new Date(item.timestamp).toLocaleDateString()}
                      </div>
                    </div>
                  </button>
                ))}
              </div>
              <button
                onClick={() => navigate(historyType === 'market-analysis' ? '/analysis-history' : '/ea-history')}
                className="w-full text-left px-4 py-1 text-xs text-indigo-400 hover:text-indigo-300 transition-colors"
              >
                View All
              </button>
            </>
          ) : (
            <div className="px-4 py-1 text-xs text-gray-400">No {historyType === 'market-analysis' ? 'analyses' : 'EAs'} found</div>
          )}
        </div>
        
        <LoadHistoryModal
          isOpen={showModal}
          onConfirm={handleConfirm}
          onCancel={handleCancel}
          historyTitle={selectedItem?.title || selectedItem?.content?.substring(0, 50) || ''}
        />
      </>
    );
  }

  if (isCollapsed) {
    return (
      <button
        onClick={onToggle}
        className="w-full flex items-center px-4 py-3 rounded-lg hover:bg-indigo-500/20 transition-colors"
      >
        <ChevronRight className="w-5 h-5 text-indigo-300 flex-shrink-0" />
      </button>
    );
  }

  return (
    <>
      <div>
        <button
          onClick={onToggle}
          className="w-full flex items-center px-4 py-3 rounded-lg hover:bg-indigo-500/20 transition-colors"
        >
          {isExpanded ? (
            <ChevronDown className="w-5 h-5 text-indigo-300 flex-shrink-0" />
          ) : (
            <ChevronRight className="w-5 h-5 text-indigo-300 flex-shrink-0" />
          )}
          <span className="text-indigo-200 ml-3">{label}</span>
        </button>
        
        {isExpanded && (
          <div className="ml-4 space-y-1">
            {recentHistory.length > 0 ? (
              recentHistory.map((item) => (
                <button
                  key={item.id}
                  onClick={() => handleItemClick(item)}
                  className="w-full flex items-center px-4 py-2 text-sm hover:bg-gray-700/50 rounded transition-colors group"
                >
                  <Circle className="w-2 h-2 text-indigo-300 flex-shrink-0 mr-2" />
                  <div className="text-left w-full min-w-0">
                    <div className="text-gray-200 truncate max-w-full">
                      {item.title || (item.content ? item.content.substring(0, 50) : 'No content available')}
                    </div>
                    <div className="text-xs text-gray-400 truncate">
                      {new Date(item.timestamp).toLocaleDateString()}
                    </div>
                  </div>
                </button>
              ))
            ) : (
              <div className="px-6 py-2 text-sm text-gray-400">No history found</div>
            )}
            <button
              onClick={() => navigate(historyType === 'market-analysis' ? '/analysis-history' : '/ea-history')}
              className="w-full text-left px-6 py-2 text-sm text-indigo-400 hover:text-indigo-300 transition-colors"
            >
              View All History
            </button>
          </div>
        )}
      </div>

      <LoadHistoryModal
        isOpen={showModal}
        onConfirm={handleConfirm}
        onCancel={handleCancel}
        historyTitle={selectedItem?.title || selectedItem?.content?.substring(0, 50) || ''}
      />
    </>
  );
}
