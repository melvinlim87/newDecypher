
>               await update(historyRef, {
                  type: 'market-analysis',
                  title: finalAnalysisResults[0]?.timeframe ? `Market Analysis 
- ${finalAnalysisResults[0].timeframe}` : 'Market Analysis',
                  content: finalAnalysisResults[0]?.analysis,
                  chartUrls: finalChartUrls,
                  messages: messages.map(msg => ({
                    role: msg.role,
                    content: msg.content
                  })),
                  lastUpdated: Date.now()
                });
                
                console.log('Existing history record updated with analysis');
              } catch (error) {
                console.error('Error updating history with analysis:', error);
              }
>             await update(historyRef, {
                messages: cleanMessages,
                lastUpdated: Date.now()
              });
              
              console.log('Existing chat history updated successfully');
            } 
            // If we don't have a history ID yet, create a new one
            else {
              console.log('Creating new history record for chat');
              
              // Create a new entry
              const newHistoryRef = push(ref(database, 
`users/${auth.currentUser.uid}/history`));
              
              await set(newHistoryRef, {
                type: 'chat-conversation',


